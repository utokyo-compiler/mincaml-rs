use sourcemap::Loc;
use syntax::{*, ExprKind::*, LitKind::*, BinOp::*, IBinOpKind::*, BBinOpKind::*, FBinOpKind::*, UnOp::*};

use crate::lexer::{Error as LexError, Token};
use super::Allocator;

grammar<'input, 'ctx>(alloc: Allocator<'ctx>);
extern {
    type Location = Loc;
    type Error = LexError<'input>;

    enum Token<'input> {
        "(" => Token::LPar,
        ")" => Token::RPar,
        "not" => Token::Not,
        Bool => Token::Bool(<bool>),
        Int => Token::Int(<i32>),
        Float => Token::Float(<f32>),
        Ident => Token::Ident(<&'input str>),
        "-" => Token::Hyphen,
        "+" => Token::Plus,
        "*" => Token::Ast,
        "/" => Token::Slash,
        "-." => Token::HyphenDot,
        "+." => Token::PlusDot,
        "*." => Token::AstDot,
        "/." => Token::SlashDot,
        "=" => Token::Equal,
        "<>" => Token::LessGreater,
        "<=" => Token::LessEqual,
        ">=" => Token::GreaterEqual,
        "<" => Token::Less,
        ">" => Token::Greater,
        "if" => Token::If,
        "then" => Token::Then,
        "else" => Token::Else,
        "let" => Token::Let,
        "in" => Token::In,
        "rec" => Token::Rec,
        "," => Token::Comma,
        "Array.make" => Token::ArrayMake,
        "." => Token::Dot,
        "<-" => Token::LessHyphen,
        ";" => Token::Semi,
    }
}

TermOp: BinOp = {
    "+" => IBinOp(Add),
    "-" => IBinOp(Sub),
    "+." => FBinOp(FAdd),
    "-." => FBinOp(FSub)
};

FactorOp: BinOp = {
    "*" => IBinOp(Mul),
    "/" => IBinOp(Div),
    "*." => FBinOp(FMul),
    "/." => FBinOp(FDiv)
};

BooleanBinOp: BinOp = {
    "=" => BBinOp(Eq),
    "<=" => BBinOp(Le),
    ">=" => BBinOp(Ge),
    "<>" => BBinOp(Ne),
    "<" => BBinOp(Lt),
    ">" => BBinOp(Gt)
};

Literal: Expr<'ctx> = {
    <l:@L> "(" ")" <r:@R> => alloc.spanned(Const(Unit), (l, r)),
    <l:@L> <x:Bool> <r:@R> => alloc.spanned(Const(Bool(x)), (l, r)),
    <l:@L> <x:Int> <r:@R> => alloc.spanned(Const(Int(x)), (l, r)),
    <l:@L> <x:Float> <r:@R> => alloc.spanned(Const(Float(x.to_bits())), (l, r)),
}

SimpleExpr: Expr<'ctx> = {
    "(" <x:Expr> ")" => x,
    <l:@L> "(" <e:Elems> ")" <r:@R>
        => alloc.spanned(Tuple(e), (l, r)),
    Literal,
    <l:@L> <x:Ident> <r:@R> => alloc.spanned(Var(alloc.ctx().intern_ident(x)), (l, r)),
    <l:@L> <s:SimpleExpr> "." "(" <x:Expr> ")" <r:@R> => alloc.spanned(Get(s, x), (l, r)),
}

AboveIf: Expr<'ctx> = {
    #[precedence(level="0")]
    SimpleExpr,

    // (a b)
    #[precedence(level="1")]
    <l:@L> <e1:SimpleExpr> <e2:ActualArgs> <r:@R>
        => alloc.spanned(App(e1, e2), (l, r)),
    <l:@L> "Array.make" <e1:SimpleExpr> <e2:AboveIf> <r:@R>
        => alloc.spanned(ArrayMake(e1, e2), (l, r)),
    <l:@L> "not" <e1:SimpleExpr> <r:@R>
        => alloc.spanned(Unary(Not, e1), (l, r)),

    // -
    #[precedence(level="2")]
    <l:@L> "-" <e1:AboveIf> <r:@R>
        => alloc.spanned(Unary(Neg, e1), (l, r)),

    // -.
    <l:@L> "-." <e1:AboveIf> <r:@R>
        => alloc.spanned(Unary(FNeg, e1), (l, r)),

    // * *. /.
    #[precedence(level="3")]
    #[assoc(side="left")]
    <l:@L> <e1:AboveIf> <op:FactorOp> <e2:AboveIf> <r:@R>
        => alloc.spanned(Binary(op, e1, e2), (l, r)),

    // + - +. -.
    #[precedence(level="4")]
    #[assoc(side="left")]
    <l:@L> <e1:AboveIf> <op:TermOp> <e2:AboveIf> <r:@R>
        => alloc.spanned(Binary(op, e1, e2), (l, r)),

    // = <> < > <= >=
    #[precedence(level="5")]
    #[assoc(side="left")]
    <l:@L> <e1:AboveIf> <op:BooleanBinOp> <e2:AboveIf> <r:@R>
        => alloc.spanned(Binary(op, e1, e2), (l, r)),

    // .() <-
    #[precedence(level="6")]
    <l:@L> <e1:SimpleExpr> "." "(" <e2:Expr> ")" "<-" <e3:If> <r:@R>
        => alloc.spanned(Set(e1, e2, e3), (l, r)),
}

If: Expr<'ctx> = {
    AboveIf,
    // if (restricted)
    <l:@L> "if" <e1:Expr> "then" <e2:Expr> "else" <e3:If> <r:@R>
        => alloc.spanned(If(e1, e2, e3), (l, r)),
}

// trick, 'let ...' has lowest prec but begins with the keyword "let"
// which distinguishs them from Expr -> Expr ';' Expr
BelowIf: Expr<'ctx> = {
    If,
    <l:@L> "let" <binder:LetBinder> "in" <e:Expr> <r:@R>
        => alloc.spanned(Let(binder, e), (l, r)),
    // if (complement)
    <l1:@L> "if" <e1:Expr> "then" <e2:Expr> "else"
        <l2:@L> "let" <binder:LetBinder> "in" <e3:Expr> <r:@R>
        => alloc.spanned(If(
            e1,
            e2,
            alloc.spanned(Let(binder, e3), (l2, r))
        ), (l1, r)),
}

LetBinder: LetBinder<'ctx> = {
    <x:Ident> "=" <val:Expr>
        => LetBinder::let_var(alloc.ctx().intern_ident(x), val),

    "rec" <x:Ident> <arg:FormalArgs> "=" <val:Expr>
        => LetBinder::let_rec(alloc.ctx().intern_ident(x), arg, val),

    "(" <p:Pat> ")" "=" <val:Expr>
        => LetBinder::let_tuple(p, val),
}

SemiSeq: Expr<'ctx> = {
    BelowIf,
    <l:@L> <e1:If> ";" <e2:SemiSeq> <r:@R> => alloc.spanned(
        Then(e1, e2),
        (l, r)
    ),
}

pub Expr: Expr<'ctx> = SemiSeq;

FormalArgs: Vec<Ident<'ctx>> = {
    <mut a:FormalArgs> <i:Ident> => {
        a.push(alloc.ctx().intern_ident(i));
        a
    },
    Ident => vec![alloc.ctx().intern_ident(<>)],
}

ActualArgs: Vec<Expr<'ctx>> = {
    <mut a:ActualArgs> <s:SimpleExpr> => {
        a.push(s);
        a
    },
    SimpleExpr => vec![<>],
}

Elems: Vec<Expr<'ctx>> = {
    <mut a:Elems> "," <i:Expr> => {
        a.push(i);
        a
    },
    <i1:Expr> "," <i2:Expr> => vec![i1, i2],
}

Pat: Vec<Ident<'ctx>> = {
    <mut a:Pat> "," <i:Ident> => {
        a.push(alloc.ctx().intern_ident(i));
        a
    },
    Ident => vec![alloc.ctx().intern_ident(<>)],
}
